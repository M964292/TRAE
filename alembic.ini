[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d%%(second).2d_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# timezone =

sqlalchemy.url = postgresql://postgres:[YOUR-PASSWORD]@db.wtycmnktsegvpduiylfq.supabase.co:5432/postgres

# max length of characters to apply to the "head" revision.
# this is the field used to identify the head revision in the
# output of "alembic revisions".
# revision_environment = false

# target metadata to autogenerate migrations: can be a module
# or any iterable with SA Table objects, or
# a function returning such things
# target_metadata = app.models.Base.metadata

# see the 'autogenerate' section below as well as documentation
# for 'autogenerate' at url http://bit.ly/alembic-autogenerate

# other arguments to include in the AlembicEnvironment
# context class.  these can be referenced from env.py using
# the "alembic_config.get_section_option()" call.
# context_opts =

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See documentation at
# http://bit.ly/alembic-post-write-hooks

# format using "black" - use section name "black" for black-related
# arguments, or "black:section" to associate arguments with a
# custom section name
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
